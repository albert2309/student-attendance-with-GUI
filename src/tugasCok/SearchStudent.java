/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tugasCok; 

import tugasCok.ModifyLecturer;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Albert
 */
public class SearchStudent extends javax.swing.JFrame {

    /**
     * Creates new form SearchStudent
     */
    public SearchStudent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        intakeButton = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        firstButton = new javax.swing.JRadioButton();
        idButton = new javax.swing.JRadioButton();
        genderButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        modifyLecturer = new javax.swing.JButton();
        userButton = new javax.swing.JRadioButton();
        lastButton = new javax.swing.JRadioButton();
        dobButton = new javax.swing.JRadioButton();
        DeleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Username", "First name", "Last name", "Gender", "Date of Birth", "Intake"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        intakeButton.setText("Intake");

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        firstButton.setText("First Name");
        firstButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        idButton.setText("ID");
        idButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        genderButton.setText("Gender");
        genderButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Search a lecturer");

        modifyLecturer.setText("Modify");
        modifyLecturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyLecturerActionPerformed(evt);
            }
        });

        userButton.setText("Username");

        lastButton.setText("Last Name");

        dobButton.setText("Date of Birth");

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Based on:");

        jButton1.setText("See Attendance");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2))
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(idButton)
                                        .addGap(55, 55, 55)
                                        .addComponent(lastButton))
                                    .addComponent(userButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(firstButton)
                                        .addGap(22, 22, 22)
                                        .addComponent(genderButton))
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(intakeButton)
                                            .addComponent(dobButton)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jButton1))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(searchButton)
                                .addGap(33, 33, 33)
                                .addComponent(modifyLecturer)
                                .addGap(40, 40, 40)
                                .addComponent(DeleteButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel1)))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(19, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idButton)
                            .addComponent(lastButton)
                            .addComponent(dobButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstButton)
                            .addComponent(genderButton)
                            .addComponent(intakeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButton)
                            .addComponent(modifyLecturer)
                            .addComponent(DeleteButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(26, 26, 26))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            FileReader inputFile = new FileReader("D:\\\\Albert\\\\Documents\\\\NetBeansProjects\\\\OODJ\\\\src\\\\tugasCok\\\\studentInfoList.txt");
            Scanner in = new Scanner(inputFile);
            Scanner lineTokenizer;
            String currLine, id, username, firstName, lastName, gender, dateOfBirth, intake;
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (int rowCount = model.getRowCount(); model.getRowCount() != 0; rowCount--) {
                model.removeRow(rowCount - 1);
            }
            while (in.hasNext()) {
                currLine = in.nextLine();
                lineTokenizer = new Scanner(currLine);
                lineTokenizer.useDelimiter(";");
                id = lineTokenizer.next();
                username = lineTokenizer.next();
                firstName = lineTokenizer.next();
                lastName = lineTokenizer.next();
                gender = lineTokenizer.next();
                dateOfBirth = lineTokenizer.next();
                intake = lineTokenizer.next();

                for (Enumeration<AbstractButton> buttonList = buttonGroup1.getElements(); buttonList.hasMoreElements();) {
                    AbstractButton checkButton = buttonList.nextElement();
                    if (checkButton.isSelected()) {
                        String searchQuery = jTextField1.getText();
                        if (searchQuery.compareToIgnoreCase(id) == 0 && checkButton.getText().compareTo("ID") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareTo(username) == 0 && checkButton.getText().compareTo("Username") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareToIgnoreCase(firstName) == 0 && checkButton.getText().compareTo("First Name") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareToIgnoreCase(lastName) == 0 && checkButton.getText().compareTo("Last Name") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareToIgnoreCase(gender) == 0 && checkButton.getText().compareTo("Gender") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareToIgnoreCase(dateOfBirth) == 0 && checkButton.getText().compareTo("Date of Birth") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        } else if (searchQuery.compareToIgnoreCase(intake) == 0 && checkButton.getText().compareTo("Intake") == 0) {
                            model.addRow(new Object[]{id, username, firstName, lastName, gender, dateOfBirth, intake});
                        }
                    }
                }
            }
            in.close();
        } catch (IOException fileError) {
            System.out.println("FILE NOT FOUND!!");
            System.exit(0);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        removeAll();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void modifyLecturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyLecturerActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        String selectedID = jTable1.getValueAt(selectedRow, 0).toString();
        String selectedUser = jTable1.getValueAt(selectedRow, 1).toString();
        String selectedFirst = jTable1.getValueAt(selectedRow, 2).toString();
        String selectedLast = jTable1.getValueAt(selectedRow, 3).toString();
        String selectedGender = jTable1.getValueAt(selectedRow, 4).toString();
        String selectedDate = jTable1.getValueAt(selectedRow, 5).toString();
        String selectedIntake = jTable1.getValueAt(selectedRow, 6).toString();
        ModifyLecturer modify = new ModifyLecturer(selectedID,selectedUser,selectedFirst,selectedLast,selectedGender,selectedDate,selectedIntake);
        modify.setVisible(true);
    }//GEN-LAST:event_modifyLecturerActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        boolean error = false;

        if (buttonGroup1.getSelection() == null) {
            JOptionPane.showMessageDialog(panel, "Please select a button on 'Based On' section", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        if (jTextField1.getText().isEmpty() == true) {
            JOptionPane.showMessageDialog(panel, "Please fill in the search bar", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        if (jTable1.getSelectionModel().isSelectionEmpty() == true) {
            JOptionPane.showMessageDialog(panel, "Please select a row on result", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        int[] listSelected = jTable1.getSelectedRows();
        if (listSelected.length > 1){
            JOptionPane.showMessageDialog(panel, "Please select only one row!", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
        if (!error){
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int selectedRow = jTable1.getSelectedRow();
            String selectedID = jTable1.getValueAt(selectedRow, 0).toString();
            String selectedUser = jTable1.getValueAt(selectedRow, 1).toString();
            String selectedFirst = jTable1.getValueAt(selectedRow, 2).toString();
            String selectedLast = jTable1.getValueAt(selectedRow, 3).toString();
            String selectedGender = jTable1.getValueAt(selectedRow, 4).toString();
            String selectedDate = jTable1.getValueAt(selectedRow, 5).toString();
            String selectedIntake = jTable1.getValueAt(selectedRow, 6).toString();
            //  System.out.println(selectedID);
            final JPanel panel = new JPanel();
            final JOptionPane optionPane = new JOptionPane(
                JOptionPane.QUESTION_MESSAGE,
                JOptionPane.YES_NO_OPTION);
            optionPane.setWantsInput(true);
            optionPane.setVisible(true);
            Object[] options = {"NO", "DELETE"};
            int selectedValue = JOptionPane.showOptionDialog(panel, "Do you want to modify this?"
                + "\nID:" + selectedID
                + "\nUsername:" + selectedUser
                + "\nFirst Name:" + selectedFirst
                + "\nLast Name:" + selectedLast
                + "\nGender:" + selectedGender
                + "\nDate of Birth:" + selectedDate
                + "\nIntake:" + selectedIntake, "Confirmation",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            if (selectedValue == 1) {
                for (int rowCount = model.getRowCount(); model.getRowCount() != 0; rowCount--) {
                    model.removeRow(rowCount - 1);
                }
                try {
                    FileReader inputFile = new FileReader("D:\\\\Albert\\\\Documents\\\\NetBeansProjects\\\\OODJ\\\\src\\\\tugasCok\\\\studentInfoList.txt");
                    Scanner in = new Scanner(inputFile);
                    Scanner lineTokenizer;
                    String currLine, id, username, firstName, lastName, gender, dateOfBirth, intake;
                    while (in.hasNext()) {
                        currLine = in.nextLine();
                        lineTokenizer = new Scanner(currLine);
                        lineTokenizer.useDelimiter(";");
                        id = lineTokenizer.next();
                        username = lineTokenizer.next();
                        firstName = lineTokenizer.next();
                        lastName = lineTokenizer.next();
                        gender = lineTokenizer.next();
                        dateOfBirth = lineTokenizer.next();
                        intake = lineTokenizer.next();
                        //masukin ke dalam list atau array.
                        if(selectedID.compareTo(id) != 0) {
                            Lecturer curr;
                            curr = new Lecturer(id, username, firstName, lastName, gender, dateOfBirth, intake);
                            lecturerList.add(curr);
                        }
                    }
                    in.close();
                    saveFile(selectedUser);
                } catch (IOException fileError) {
                    System.out.println("FILE NOT FOUND!!");
                    System.exit(0);
                }
                //setelah masukin. Write ke dalam
            }
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    public void saveFile(String selectedUser) throws IOException {
        //Write all the remaining lecturers into texfile
        FileWriter outputFile = new FileWriter("D:\\\\Albert\\\\Documents\\\\NetBeansProjects\\\\OODJ\\\\src\\\\tugasCok\\\\studentInfoList.txt");
        String currLine = "";
        for (int index = 0; index < lecturerList.size(); index++) {
            currLine = lecturerList.get(index).getIdNumber() + ";" + lecturerList.get(index).getUsername() + ";" + lecturerList.get(index).getFirstName() + ";" + lecturerList.get(index).getLastName() + ";" + lecturerList.get(index).getGender() + ";" + lecturerList.get(index).getDateOfBirth() + ";" + lecturerList.get(index).getIntake();
            outputFile.write(currLine +'\n');
        }
        outputFile.close();
       //Take a list of users
//        String loginFile = "D:\\Albert\\Documents\\NetBeansProjects\\OODJ\\src\\tugasCok\\loginList.txt";
        FileReader inputFile = new FileReader("D:\\Albert\\Documents\\NetBeansProjects\\OODJ\\src\\tugasCok\\loginList.txt");
        Scanner in = new Scanner(inputFile);
        Scanner lineTokenizer;
        
        currLine = "";
        ArrayList<String> userList = new ArrayList<>();
        ArrayList<String> passwordList = new ArrayList<>();
        ArrayList<String> userType = new ArrayList<>();
        
        int countUser = 0;
        String candidateString, pass,user = "";
        while(in.hasNext()){
            currLine = in.nextLine();
            lineTokenizer = new Scanner(currLine);
            lineTokenizer.useDelimiter(";");
            candidateString = lineTokenizer.next();
            if(selectedUser.compareTo(candidateString) != 0){  
            userList.add(candidateString);
             pass = lineTokenizer.next();
            passwordList.add(pass);
            user = lineTokenizer.next();
            userType.add(user);
            countUser++;
            } 
        }
        
        outputFile = new FileWriter("D:\\Albert\\Documents\\NetBeansProjects\\OODJ\\src\\tugasCok\\loginList.txt");;
        currLine = "";
        for (int index = 0; index < countUser; index++) {
            currLine = userList.get(index) + ";" + passwordList.get(index) + ";" + userType.get(index);
            outputFile.write(currLine + '\n');
        }
        outputFile.close();
        in.close();
     
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchStudent().setVisible(true);
            }
        });
    }
    private List<Lecturer> lecturerList;
    final JPanel panel = new JPanel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton dobButton;
    private javax.swing.JRadioButton firstButton;
    private javax.swing.JRadioButton genderButton;
    private javax.swing.JRadioButton idButton;
    private javax.swing.JRadioButton intakeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton lastButton;
    private javax.swing.JButton modifyLecturer;
    private javax.swing.JButton searchButton;
    private javax.swing.JRadioButton userButton;
    // End of variables declaration//GEN-END:variables
}
